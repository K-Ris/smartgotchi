
#define TFT_PIN_CS   10 // Arduino-Pin an Display CS   
#define TFT_PIN_DC   9  // Arduino-Pin an 
#define TFT_PIN_RST  8  // Arduino Reset-Pin
#define TFT_PIN_LED  2  //Arduino Backlight Pin

#define MESSAGE_LED 7

#define BUTTON_1 3
#define BUTTON_2 4
#define BUTTON_3 5

//#define redPin A3
//#define greenPin A2
//#define bluePin A4

#include <SPI.h>             // SPI für die Kommunikation
#include <Adafruit_GFX.h>    // Adafruit Grafik-Bibliothek wird benötigt
#include <Adafruit_ST7735.h> // Adafruit ST7735-Bibliothek wird benötigt

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_PIN_CS, TFT_PIN_DC, TFT_PIN_RST);  // ST7735-Bibliothek Setup

//int buttonState = LOW; //this variable tracks the state of the button, low if not pressed, high if pressed
//int ledState = -1; //this variable tracks the state of the LED, negative if off, positive if on

long lastDebounceTime = 0;  // the last time the output pin was toggled
long debounceDelay = 250;    // the debounce time; increase if the output flickers

int testGraphic[24] = { 0x0000, 0x0000, 0x0000, 0x0000, 0x07, 0x0000,
                        0x0000, 0x07FF, 0x07FF, 0x07FF, 0x0000, 0x0000,
                        0x0000, 0x07FF, 0x0000, 0x07FF, 0x0000, 0x0000,
                        0x0000, 0x07FF, 0x0000, 0x07FF, 0x0000, 0x0000
                      };

const unsigned int testKitten[]PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00
  , 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00
  , 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00
  , 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00
  , 0x00, 0x00, 0x3f, 0x80, 0x00, 0x0e, 0x00, 0x03, 0xf8, 0x00
  , 0x00, 0x00, 0x3f, 0x80, 0x00, 0x7e, 0x00, 0x01, 0xf8, 0x00
  , 0x00, 0x00, 0x3f, 0x80, 0x00, 0xfe, 0x00, 0x01, 0xf8, 0x00
  , 0x00, 0x00, 0x7f, 0xff, 0x83, 0xfe, 0x00, 0x01, 0xf8, 0x00
  , 0x00, 0x00, 0x7f, 0xff, 0xf7, 0xfe, 0x00, 0x03, 0xf8, 0x00
  , 0x00, 0x04, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xf0, 0x00
  , 0x00, 0x06, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xe0, 0x00
  , 0x00, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xe0, 0x00
  , 0x00, 0x17, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xc0, 0x00
  , 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x80, 0x00
  , 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0x00, 0x00
  , 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0x00, 0x00
  , 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7e, 0x00, 0x00
  , 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7c, 0x00, 0x00
  , 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xf8, 0x00, 0x00
  , 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00
  , 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00
  , 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00
  , 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00
  , 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00
  , 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00
  , 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00
  , 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00
  , 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00
  , 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00
  , 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00
  , 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00
  , 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00
  , 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00
  , 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00
  , 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00
  , 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00
  , 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00
  , 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0x3f, 0x80, 0x00
  , 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x1f, 0x80, 0x00
  , 0x00, 0x00, 0x00, 0x3f, 0xef, 0xfc, 0x00, 0x1f, 0x80, 0x00
  , 0x00, 0x00, 0x00, 0x3f, 0xef, 0xf8, 0x00, 0x0f, 0x80, 0x00
  , 0x00, 0x00, 0x00, 0x1f, 0x8f, 0xf0, 0x00, 0x0f, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x1f, 0x8f, 0xe0, 0x00, 0x06, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x1f, 0x87, 0xc0, 0x00, 0x04, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x0e, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

char data = 0;                //Variable for storing received data
String instruction = "";
void setup()
{
  Serial.begin(9600);         //Sets the data rate in bits per second (baud) for serial data transmission
  //pinMode(12, OUTPUT);        //Sets digital pin 13 as output pin
  pinMode(TFT_PIN_LED, OUTPUT);
  digitalWrite(TFT_PIN_LED, HIGH);

  pinMode(MESSAGE_LED, OUTPUT);
  digitalWrite(MESSAGE_LED, LOW);

  pinMode(BUTTON_1, INPUT_PULLUP);
  pinMode(BUTTON_2, INPUT_PULLUP);
  pinMode(BUTTON_3, INPUT_PULLUP);

  //pinMode(redPin, OUTPUT);
  //pinMode(greenPin, OUTPUT);
  //pinMode(bluePin, OUTPUT);

  tft.initR(INITR_BLACKTAB);

  tft.setRotation(2);

  // fillScreen(farbe);
  tft.fillScreen(ST7735_BLACK);

  // drawRect(pos_links,pos_oben,breite,hoehe,farbe);
  //tft.drawRect(0, 0, 128, 160, ST7735_BLUE);

  // setTextSize(groesse);
  tft.setTextSize(3);

  // setCursor(links,oben);
  tft.setCursor(20, 30);

  // setTextColor(farbe);
  tft.setTextColor(ST7735_WHITE);

  // print(text);
  tft.print("23:08");

  tft.fillRoundRect(25, 90, 78, 60, 8, ST77XX_WHITE);

  //drawGraphic(50, 120, 5, testGraphic, 23);

  //drawGraphic(50, 50, 79, testKitten, 6399);

  drawBitmap(25, 80, testKitten, 80, 80, ST77XX_BLACK);


  //setColor(255, 0, 0);  // red

}
void loop()
{

  //DEBOUNCING AND BUTTON CHECK

  //sample the state of the button - is it pressed or not?
  //buttonState = digitalRead(BUTTON_1);

  //filter out any noise by setting a time buffer
  if ( (millis() - lastDebounceTime) > debounceDelay) {

    //if the button has been pressed, lets toggle the LED from "off to on" or "on to off"
    if (digitalRead(BUTTON_1) == LOW) {

      changeBackgroundColor('r');

      //digitalWrite(TFT_PIN_LED, HIGH); //turn LED on
      lastDebounceTime = millis(); //set the current time
    }
    else if (digitalRead(BUTTON_2) == LOW) {
      changeBackgroundColor('g');

      //digitalWrite(TFT_PIN_LED, HIGH); //turn LED on
      lastDebounceTime = millis(); //set the current time
    }
    else if (digitalRead(BUTTON_3) == LOW) {
      changeBackgroundColor('b');

      //digitalWrite(TFT_PIN_LED, HIGH); //turn LED on
      lastDebounceTime = millis(); //set the current time
    }

  }//close if(time buffer)


  //HANDLE BLUETOOTH CONNECTION AND INSTRUCTIONS

  if (Serial.available() > 0) // Send data only when you receive data:
  {
    data = Serial.read();      //Read the incoming data and store it into variable data
    Serial.print(data);        //Print Value inside data in Serial monitor
    Serial.print("\n");        //New line

    if (data == ';') {
      //close instruction
      fillTextString(instruction);
      instruction = "";
    }
    else {
      instruction += data;
    }

    if (instruction.equals("on"))           //Checks whether value of data is equal to 1
    {
      //digitalWrite(MESSAGE_LED, HIGH);  //If value is 1 then LED turns ON
      //digitalWrite(TFT_PIN_LED, HIGH);
      digitalWrite(MESSAGE_LED, HIGH);

      fillTextChar(data);
    }
    else if (instruction.equals("off"))      //Checks whether value of data is equal to 0
    {
      //digitalWrite(MESSAGE_LED, LOW);   //If value is 0 then LED turns OFF
      //digitalWrite(TFT_PIN_LED, LOW);
      digitalWrite(MESSAGE_LED, LOW);

      fillTextChar(data);
    }
  }

}


void fillTextChar(char text) {

  tft.fillScreen(ST7735_BLACK);

  // setTextSize(groesse);
  tft.setTextSize(1);

  // setCursor(links,oben);
  tft.setCursor(30, 20);

  // setTextColor(farbe);
  tft.setTextColor(ST7735_WHITE);

  // print(text);
  tft.print(text);
}

void fillTextString(String text) {

  tft.fillScreen(ST7735_BLACK);

  // setTextSize(groesse);
  tft.setTextSize(1);

  // setCursor(links,oben);
  tft.setCursor(30, 20);

  // setTextColor(farbe);
  tft.setTextColor(ST7735_WHITE);

  // print(text);
  tft.print(text);
}

void changeBackgroundColor(char color) {
  if (color == 'r') {
    tft.fillScreen(ST7735_RED);
  }
  else if (color == 'g') {
    tft.fillScreen(ST7735_GREEN);
  }
  else if (color == 'b') {
    tft.fillScreen(ST7735_BLUE);
  }
}

void drawGraphic(int posx, int posy, int sizex, int content[], int contentSize) {
  int i = 0;
  int offsetx = 0;
  int offsety = 0;


  for (i = 0; i < contentSize; i++) {
    tft.drawPixel(posx + offsetx, posy + offsety, content[i]);

    if (offsetx >= sizex) {
      offsetx = 0;
      offsety++;
    }
    else {
      offsetx++;
    }

  }
}

void drawBitmap(int16_t x, int16_t y,const uint16_t *bitmap, int16_t w, int16_t h, uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;
  uint8_t byte;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++) {
      if(i & 7) byte <<= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x80) tft.drawPixel(x+i, y+j, color);
    }
  }
}

/*
  void setColor(int red, int green, int blue)
  {
  if (red > 255)
    red = 255;
  if (green > 255)
    green = 255;
  if (blue > 255)
    blue = 255;

  analogWrite(redPin, red);
  analogWrite(greenPin, green);
  analogWrite(bluePin, blue);
  }
*/
